{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/a-space-themed-intro-to-golang/","webpackCompilationHash":"37e436b5f054f2840569","result":{"data":{"markdownRemark":{"id":"22ac32b9-ba8b-5fd7-8c2e-3377889775eb","html":"<p>Go is real cool, something that is extra cool about it is that it is the highest paying technology according to Stack Overflows 2017 dataset. The average pay for a Go developer is ~ 110k a year: <a href=\"https://insights.stackoverflow.com/survey/2017\">this link right here!</a></p>\n<p>(Technology -> Top Paying Technologies on sidebar for verification)</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2400/1*E7Jb0bgW3wwTRqPo9adQ-Q.jpeg\" alt=\"Goher surrounding by a lot of money with fake hands making it look like the gopher is holding money\"></p>\n<div style=\"text-align: center\"><small>Hot damn!</small></div>\n<p>But, that is only a piece of the reason to learn Go. The main reason is this: <code class=\"language-text\">learning it is only going to speed up your understanding of fundamental computer science topics</code>. Why? Well, Golang is a well thought out modern language that utilises many of the best practices of programming languages created before it.</p>\n<p>It is also a language that was made by Google to take care of the massive amount of data and problems associated with handling their search engine that almost everybody uses.</p>\n<p>On another note, to fully learn Go is to learn how to build software that provides answers for low level problems. Another way to say it is software that provides services for other software. <code class=\"language-text\">In a way, if you know Golang then you know how to build programs that touch the root of this field.</code></p>\n<p>Let’s delve into some code. The story begins as so:</p>\n<blockquote>\nIt is now, this time, as in, 2018. But suddenly time jumps… 240 years ahead. As if you were Austin Powers frozen all this time. And it is up to you to suddenly save the universe. With a twist at the end.\n</blockquote>\n<p>I wrote a piece of code, around 150 lines, that tells the very short story in its entirety (lots of prints) which I will put at the end. I am going to go through the code from start to finish prior. Starts simple, then gets a bit dense.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n <span class=\"token string\">\"fmt\"</span>\n <span class=\"token string\">\"time\"</span>\n <span class=\"token string\">\"strconv\"</span>\n <span class=\"token string\">\"io\"</span>\n <span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong><code class=\"language-text\">package main</code></strong>? All Go source code is part of a package, and each file necessitates a package statement. package main is the file where the code runs. Other package files are modules imported into <code class=\"language-text\">package main</code>. The modules are reusable pieces of code to use or implement within <code class=\"language-text\">package main</code>.</p>\n<p>So, the imported modules contain source code which I will use within this file.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Aliens <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  species <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> NotEarthling <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  total <span class=\"token builtin\">int</span>\n  century <span class=\"token builtin\">string</span>\n  thingamajig <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> Earthling <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  total <span class=\"token builtin\">int</span>\n  century <span class=\"token builtin\">string</span>\n  name <span class=\"token builtin\">string</span>\n  age <span class=\"token builtin\">int64</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> WordSpaceship <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  health <span class=\"token builtin\">string</span>\n  weapon <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> NumberSpaceship <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  health <span class=\"token builtin\">int</span>\n  weapon <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Multiple structs with different usages.</p>\n<p><strong>What’s a struct</strong>? It is how you create an object that can have different types for each value. The key is the word written, a string. Though, each key must have the specified type, it is not dynamic.</p>\n<p>The other major way to create objects is with a <strong>map</strong>. Though, in that case every key must be a single type as well as the values:</p>\n<ul>\n<li><strong><code class=\"language-text\">make(map[string]int)</code></strong> all keys must be string, all values must be int</li>\n</ul>\n<p>So, in maps each key must be of one type and each value must be of one type. In structs, different types are allowed for each value.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> you <span class=\"token operator\">=</span> Earthling<span class=\"token punctuation\">{</span>century<span class=\"token punctuation\">:</span> <span class=\"token string\">\"21st\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"you\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">}</span>\nfunc <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    defer fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is this all a dream?\"</span><span class=\"token punctuation\">)</span>\n    now <span class=\"token punctuation\">:</span><span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    nanos <span class=\"token punctuation\">:</span><span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Right now it is: %v! \\nPop! AHHHHH\\n\\n\"</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <strong>variable declaration</strong> occurs in the global scope, so it must be initialised with the var keyword. This is one way to initialise structs. Notice that I specified the key and set it’s value to the corresponding type written in the struct definition. Notice how I have not initialised every key/value (you not need to).</p>\n<p><strong><code class=\"language-text\">defer</code>>?</strong> This creates a last-in-first-out stack of function invocations to be called after the completion of func main() {…} . I say a stack as defer can be called multiple times and each time it is called the last function pushed onto the stack is called first.</p>\n<p><strong><code class=\"language-text\">:=</code>, what is this?</strong> This is to say that the type will be figured out dynamically by the compiler. As in, when initialising a value to a variable in this way you do not need to specify the type, the only way to do so.</p>\n<p><strong><code class=\"language-text\">time.Now()</code></strong> returns this: <code class=\"language-text\">2017–12–28 01:41:05.240081928 +0000 UTC</code></p>\n<p><strong><code class=\"language-text\">now.UnixNano()</code></strong> returns this: 1514425756675856179 which is the amount of nanoseconds that have occurred since the creation of Golang 8 years ago.</p>\n<p><code class=\"language-text\">Printf</code> allows logging out values in varying forms. These are the two main forms:</p>\n<ul>\n<li><code class=\"language-text\">%v</code> gives the default value</li>\n<li><code class=\"language-text\">%T</code> gives the type of the value</li>\n</ul>\n<p>Still in the function main below.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">nanos <span class=\"token operator\">=</span> nanos <span class=\"token operator\">+</span> <span class=\"token number\">7600000000000000000</span>\n\nyears <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span>nanos <span class=\"token operator\">-</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">1000000000</span><span class=\"token operator\">/</span><span class=\"token number\">31622400</span>\n\nnow <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Unix</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nanos<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"And now it is: %v!\\nOh hell!\\n\\n\"</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">)</span></code></pre></div>\n<p>At the beginning one goes 7600000000000000000 nanoseconds into the future which is ~ 240 years.</p>\n<p><strong><code class=\"language-text\">years</code></strong> is a calculation, convert to seconds then to years.</p>\n<p><strong><code class=\"language-text\">time.Unix(seconds, nano seconds)</code></strong> will convert the nanoseconds to: 2258–10–29 00:55:56.675856179 +0000 UTC</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> e <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Earthling\n<span class=\"token keyword\">var</span> ne <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>NotEarthling\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">70000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n    e <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> Earthling<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">44</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n    ne <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ne<span class=\"token punctuation\">,</span> NotEarthling<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\naliens <span class=\"token operator\">:=</span> Aliens<span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\nfutureEarthling <span class=\"token operator\">:=</span> Earthling<span class=\"token punctuation\">{</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"22nd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The Future\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32141</span><span class=\"token punctuation\">}</span>\n\nfutureNotEarthling <span class=\"token operator\">:=</span> NotEarthling<span class=\"token punctuation\">{</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ne<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"99th\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Grok grok grok\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">var</code> keyword calls set a <em>zero valued</em> array (empty array) that can only be filled with the specified type. One cannot add ints, strings, etc. to this array.</p>\n<p>In the following <strong>for loops</strong>, I am <em>appending empty structs of the specified type</em> to the arrays.</p>\n<p>There are only two alien species in this case. <code class=\"language-text\">Earthlings</code> and <code class=\"language-text\">NotEarthlings</code>.</p>\n<p>Notice, how <code class=\"language-text\">futureEarthling</code> is set to the struct <code class=\"language-text\">Earthlings</code> without specifying the key, this is a shorthand, as long as you place the values in the corresponding order defined in the struct, in this case: <code class=\"language-text\">{int, string, string, int64}</code>, then the fields can be filled out in this way.</p>\n<p>Now there is a function called <code class=\"language-text\">Greet</code> attached to each <code class=\"language-text\">Earthling</code> object… lets check out that separate, not in main, function.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>Earthling<span class=\"token punctuation\">)</span> <span class=\"token function\">Greet</span><span class=\"token punctuation\">(</span>y <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    century<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>century<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> century <span class=\"token operator\">></span> <span class=\"token number\">21</span> <span class=\"token operator\">&amp;&amp;</span> century <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">{</span>\n      age <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">FormatInt</span><span class=\"token punctuation\">(</span>you<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n      str <span class=\"token operator\">:=</span> <span class=\"token string\">\"Welcome to the future young Padawan, you are in the: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>century <span class=\"token operator\">+</span> <span class=\"token string\">\" century. And I am: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\". You are now... \"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span> <span class=\"token string\">\"years old. The world is under attack, and you have been revived to defend it! Big scary invader has something to say...\"</span>\n      <span class=\"token keyword\">return</span> str\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      e<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> y\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Where am I???\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ok, so this corresponds to the existential crisis this person is going through, waking up so far into the future, and some random future guy that has something to say!</p>\n<p>Hmm… look at the top: <code class=\"language-text\">(e *Earthling)</code>. What’s this? Well, <code class=\"language-text\">e</code> is going to be the instance of the <code class=\"language-text\">Earthling</code> object the method is called on. And the _? This is a pointer. I invite you to open the repl at the bottom of this post, delete that _ and see what happens.</p>\n<p>What it means is this: <code class=\"language-text\">you.Greet(year)</code> <em>is creating a copy of you unless you point at it’s memory address.</em> If you do not, anything you do on you will not alter the object within the main function. The pointer assures that the object can be altered.</p>\n<p>We also have a new library in this code snippet… <code class=\"language-text\">strconv</code>. This is the library to use when you want to change an int to a string, vice versa, or many other types. Go has so many data types… int, int8, int16, int32, int64. And all I named is int there, in other words, one can go on and on… type galore.</p>\n<p>If you look closely, the entire reason I used a pointer was to alter the age of the young Padawan.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">numberShip <span class=\"token operator\">:=</span> NumberSpaceship<span class=\"token punctuation\">{</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\nwordShip <span class=\"token operator\">:=</span> WordSpaceship<span class=\"token punctuation\">{</span><span class=\"token string\">\"Read this to defeat me.\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Powerful words!\"</span><span class=\"token punctuation\">}</span>\n\nwordAttack <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\nfinished <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        numberShip<span class=\"token punctuation\">.</span>health <span class=\"token operator\">=</span> numberShip<span class=\"token punctuation\">.</span>health <span class=\"token operator\">-</span> <span class=\"token operator\">&lt;-</span>wordAttack\n        <span class=\"token keyword\">if</span> numberShip<span class=\"token punctuation\">.</span>health <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">Extinction</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>aliens<span class=\"token punctuation\">)</span>\n            finished <span class=\"token operator\">&lt;-</span> <span class=\"token number\">0</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">Fight</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>numberShip<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wordShip<span class=\"token punctuation\">,</span> wordAttack<span class=\"token punctuation\">,</span> finished<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ok, first of all, the first parameter of both structs is their health. So, for the <code class=\"language-text\">numberShip</code> the health is 100, and for the <code class=\"language-text\">wordShip</code> the health is a sentence… “Read this to defeat me” …? I’ll go into that in the function at the bottom, <code class=\"language-text\">Fight</code>, which uses what is called a <code class=\"language-text\">Reader</code>.</p>\n<p><code class=\"language-text\">make(chan int)</code> creates what is called a channel. A conduit to send/receive values. Sending is as so: <code class=\"language-text\">&lt;-wordAttack</code>, and receiving as: <code class=\"language-text\">finished &lt;- 0</code>.</p>\n<p><code class=\"language-text\">go func() {…}()</code> is the creation of a <em>goroutine</em>. When working with channels and goroutines in unison, the main thing to remember is that the goroutine continues <em>as long as the channel sends it values</em>. So, let’s go check out where it is getting it’s values, the <code class=\"language-text\">Fight</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">func <span class=\"token function\">Fight</span><span class=\"token punctuation\">(</span>ns <span class=\"token operator\">*</span>NumberSpaceship<span class=\"token punctuation\">,</span> ws <span class=\"token operator\">*</span>WordSpaceship<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> f chan int<span class=\"token punctuation\">)</span> string <span class=\"token punctuation\">{</span>\n    x <span class=\"token punctuation\">:</span><span class=\"token operator\">=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ws<span class=\"token punctuation\">.</span>weapon<span class=\"token punctuation\">)</span>\n    r <span class=\"token punctuation\">:</span><span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>ws<span class=\"token punctuation\">.</span>health<span class=\"token punctuation\">)</span>\n    b <span class=\"token punctuation\">:</span><span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>byte<span class=\"token punctuation\">,</span> ns<span class=\"token punctuation\">.</span>weapon<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        select <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> c <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> x<span class=\"token punctuation\">:</span>\n                fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hit it!\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span>f<span class=\"token punctuation\">:</span>\n                fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"He's finished!\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"\\nYou saved time, space, eternity, everything!\\n\"</span>\n        <span class=\"token punctuation\">}</span>\n        _<span class=\"token punctuation\">,</span> err <span class=\"token punctuation\">:</span><span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> io<span class=\"token punctuation\">.</span><span class=\"token constant\">EOF</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"You failed, the universe is to end.\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>First, check out the function signature. The function was called by <em>referencing</em> the variables memory address (with <strong>&#x26;</strong>). In the signature, the function expects a <em>pointer</em> (ie. a <em>referenced</em> variable) as the argument for both <code class=\"language-text\">NumberSpaceship</code> and <code class=\"language-text\">WordSpaceship</code>.</p>\n<p>Also, check out how both <strong>chan ints</strong> type is only written once. Parameter types can be grouped if they are next to one another and the same exact type.</p>\n<p>First, the <strong>strings</strong> library, this “implements simple functions to manipulate UTF-8 encoded strings.” In this function a <em>reader</em> will be created to read a string.</p>\n<p>Ok, the implementation of the string reader:</p>\n<ul>\n<li><strong><code class=\"language-text\">r := strings.NewReader(ws.health)</code></strong> returns a new <em>Reader</em> that will read from s: <em>“Read this to defeat me”</em>.</li>\n<li><strong><code class=\"language-text\">b := make([]byte, ns.weapon)</code></strong> returns a byte slice of the length specified. <code class=\"language-text\">ws.weapon</code> is the value 3.</li>\n<li><strong><code class=\"language-text\">_, err := r.Read(b)</code></strong> is more nuanced. <code class=\"language-text\">_</code> can also be a variable name, let’s call it <code class=\"language-text\">n</code>. If <code class=\"language-text\">n</code> exists it means that the amount of bytes read by <code class=\"language-text\">Read</code> is to be returned to <code class=\"language-text\">n</code>. But if left as is then one does not have to use the value returned. Otherwise, you have to, which is to say that <em>Go does not allow one to not use declared variables</em>. So, for one, <code class=\"language-text\">Read</code> returns the amount of bytes read, and secondly it returns an error if and only if the entire string was read, in which case an <code class=\"language-text\">io.EOF</code> (end of file) error is returned. Otherwise, it’s value is: <code class=\"language-text\">&lt;nil&gt;</code>.</li>\n<li>So, <code class=\"language-text\">r</code> is the reader. <code class=\"language-text\">b</code> is what the reading of the string is put into. <code class=\"language-text\">Read</code> is the function that is called to make that come about.</li>\n</ul>\n<p>So, to summarise the <code class=\"language-text\">Reader</code>, and why it is being used, once the string is read the <code class=\"language-text\">NumberSpaceship</code> wins, and the <code class=\"language-text\">WordSpaceship</code> loses. Very intense battle.</p>\n<ul>\n<li>Quick side note: <code class=\"language-text\">for {…}</code> is to say, do an infinite loop until the function returns.</li>\n</ul>\n<p>As for the attack of the <code class=\"language-text\">WordSpaceship</code>.</p>\n<ul>\n<li><strong><code class=\"language-text\">select</code></strong> is waiting on multiple communication operations, both channels, <code class=\"language-text\">c</code> and <code class=\"language-text\">f</code>. When one is ready to send out its data or receive data, it will continue to do so as long as the function does not return.</li>\n<li><strong><code class=\"language-text\">case &lt;- x</code></strong> is to say, continually send the value of x to this channel. Then, going back to <code class=\"language-text\">func main</code>’s goroutine, do this: <code class=\"language-text\">numberShip.health = numberShip.health — &lt;-wordAttack</code> to damage the ship. So, the channel is emptied of the x it just received. So, <em>channel receives a value and sends it out right after in the corresponding goroutine</em>.</li>\n<li><strong><code class=\"language-text\">case &lt;- f</code></strong> solely runs when f has a value associated to it and this only happens when this occurs in <code class=\"language-text\">main: finished &lt;- 0</code>, after the if statement.</li>\n</ul>\n<p>That’s the fight! And after the battle, whoever lost, well, their entire species goes extinct… this was how it was written, the logic is not combined in the real code as so though.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Aliens <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    species <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Extinction</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>Aliens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">.</span>species <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>species <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    aliens <span class=\"token operator\">:=</span> Aliens<span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function\">Extinction</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>aliens<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quite an intense bit of logic.</p>\n<p>And the entirety of what is logged out from the real code!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Right now it is: 2017-12-28 21:40:35.066259304 +0000 UTC!\nPop! AHHHHH\n\nAnd now it is: 2258-10-29 20:47:15.066259304 +0000 UTC!\nOh hell!\n\nWhere am I???\n\nWelcome to the future young Padawan, you are in the: 22nd century. And I am: The Future. You are now... 264 years old. The Universe is under attack, and you have been revived to defend it! Big scary invader has something to say...\n\nTord thaz geck hild quemp 240!\n\nHe challenged you! You&#39;re the chosen one, so you must save the Universe! Jump on this spaceship.\n\nVRRRROOOOOOOOOOOOMMMMMMMM BOOM BOP BOOM BOP\n\nHit it!\nHit it!\nHit it!\nHit it!\nHit it!\nHit it!\nHit it!\nHe&#39;s finished!\n\nYou saved time, space, eternity, everything!\n\nAHHH, the aliens left a bomb, the Universe is to disintegrate into nothingness!\n\nSome higher being sort of thing says: There are  0  sentient beings left alive.\n\nWas that all a dream?</code></pre></div>\n<p>And the repl:</p>\n<p><a href=\"https://repl.it/@jerrymuzsik/GolangArticleFrozenSpaceGuy\">Repl</a></p>\n<p>I highly recommend this if you are interested in learning more Go, great introductory documentation/practice problems!</p>\n<p><a href=\"https://tour.golang.org/welcome/1\">Tour of Go</a></p>\n<blockquote>Thanks very much for reading! Mr. Golang has a bit to say as well.</blockquote>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*PmggWfHAc6_fXW64llUBKw.jpeg\" alt=\"Golang gopher with a top hat on, a suit, and a glass of champagne\"></p>\n<div style=\"text-align: center;\"><small>I thanky thee muchee for readee thisee thingee, cheerees mee buddy</small></div>","fields":{"slug":"/posts/a-space-themed-intro-to-golang/","tagSlugs":["/tag/golang/","/tag/backend/","/tag/not-javascript/"]},"frontmatter":{"date":"2017-12-20","description":"A short article about Golang aimed for newer developers or those who have not spent much time researching the language and would like a short, concise, well thought-out, and original introduction. All code written is within a repl.","tags":["Golang","Backend","Not-Javascript"],"title":"A Space Themed Intro to Golang"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/a-space-themed-intro-to-golang/"}}}