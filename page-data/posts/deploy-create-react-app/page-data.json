{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/deploy-create-react-app/","webpackCompilationHash":"37e436b5f054f2840569","result":{"data":{"markdownRemark":{"id":"a96ad8cf-cbc7-5b6d-bb3a-501bfbe42794","html":"<p>Before beginning a project there is one thing you must know, and that is what exactly you are passionate about. I’ll leave that fundamental conundrum to you. Personally, I love to dwell on life on Earth and the folks on it with all the disparate forces within their lives. I decided to do this:</p>\n<ul>\n<li>Ten data sets containing data expressing something intense about life. Ten charts to create a user experience with the data.</li>\n<li>Ten quotes correlating with the data, from the WikiQuotes API.</li>\n</ul>\n<p>This is what the app looks like in the end:</p>\n<p><a href=\"https://jmuzsik.github.io/quote_and_a_chart/\">Deployed Link</a></p>\n<p>This guide will be separated as so:</p>\n<ol>\n<li>Creating the app with Create React App</li>\n<li>Manipulation of data to create charts with Recharts</li>\n<li>Utilising the WikiQuotes API to scrape quotes</li>\n<li>Dynamically changing pages and passing props</li>\n<li>Deploying on Github Pages</li>\n</ol>\n<hr />\n<h2 id=\"creating-a-react-app\"><a href=\"#creating-a-react-app\" aria-label=\"creating a react app permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a React App</h2>\n<ol>\n<li>npm install -g create-react-app</li>\n<li>Then this: create-react-app name<em>of</em>app<em>you’re</em>creating</li>\n<li>This creates a directory with the file structure within it</li>\n<li>Go into this new directory</li>\n<li>npm start or yarn start</li>\n<li>Take a peak at the file structure</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">my-app/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n  data/</code></pre></div>\n<h3 id=\"node-modules\"><a href=\"#node-modules\" aria-label=\"node modules permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>node-modules?</h3>\n<ul>\n<li>Contains countless lines of code written by some smart folks to do all sorts of heavy lifting for you so you can simply focus on the easy-to-conceptualise part of writing code (functions that do relatable things and visual aspects)</li>\n</ul>\n<h3 id=\"public\"><a href=\"#public\" aria-label=\"public permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>public?</h3>\n<ul>\n<li>Here is the HTML file that will be rendered on the page, the starting point of your app, visually.</li>\n<li><code class=\"language-text\">favicon.ico</code>, that’s that little image on your tab. It is referenced in the <code class=\"language-text\">manifest.json</code></li>\n<li>The `manifest.json is mainly used for metadata</li>\n</ul>\n<h3 id=\"src\"><a href=\"#src\" aria-label=\"src permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>src</h3>\n<p>This is where just about everything you write will be located</p>\n<p>See the <code class=\"language-text\">index.css</code> and the <code class=\"language-text\">App.css</code>. Both do the same thing. I thought of it this way. What will I want to occur visually globally throughout the app? Put that into the <code class=\"language-text\">index.css</code>. All else put into the <code class=\"language-text\">App.css</code>. It’s a small app.</p>\n<p>The <code class=\"language-text\">registerServiceWorker.js</code>, this creates ‘workers’ that do tasks to improve a users experience with a website as well as improving the functioning of the site as a whole.</p>\n<p>The <code class=\"language-text\">index.js</code> is linking the <code class=\"language-text\">index.html</code> to everything you are to write.</p>\n<p>The juicy part, the <code class=\"language-text\">App.js</code>, is your app. This is the dwelling place. The place where everything comes together. Personally, I deleted everything in the return statement except the <code class=\"language-text\">div</code> as I did not want a header.</p>\n<p>Notice the data folder I have there. Go find some data, personally I used: WHO data and clicked around until I found data of interest. After the JSON is downloaded, move the files to the data folder.</p>\n<p>Now, onto the actual writing of code.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*E4vQx_QoYJIdhMZJMwBpSg.png\" alt=\"hands typing on a futuristic looking keyboard\"></p>\n<p>How many individual pages will you have? Well, you should create a component for each one. The beginning of my plan was this. Ten files of data to create ten charts. So I will show how to create the charts.</p>\n<p>First, create a new folder to hold these components that you will create and simultaneously create the files associated.</p>\n<hr />\n<h2 id=\"manipulation-of-data-and-creation-of-charts\"><a href=\"#manipulation-of-data-and-creation-of-charts\" aria-label=\"manipulation of data and creation of charts permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Manipulation of data and creation of charts</h2>\n<p>I’ll show you how to create this chart:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*0-8PcqFHOv5InnYhIitdEw.png\" alt=\"A page with a chart related to the sexual transmission of AID&#x27;s by country and year with a quote at the top of the page\"></p>\n<div style=\"text-align: center;\"><small>I did mention expressing something intense about life</small></div>\n<p>Link to data if curious: <a href=\"http://apps.who.int/gho/data/view.main.vEQKNHIVTOTv\">Data Set</a></p>\n<p>With data originally structured as so:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n   <span class=\"token property\">\"dimension\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                   many_irrelevant_objects\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token property\">\"fact\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n                   <span class=\"token property\">\"dims\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                               <span class=\"token property\">\"COUNTRY\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Afganhistan\"</span><span class=\"token punctuation\">,</span>\n                               <span class=\"token property\">\"YEAR\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2010\"</span><span class=\"token punctuation\">,</span>\n                               <span class=\"token property\">\"GHO\"</span><span class=\"token operator\">:</span> \"Knowledge about sexual\n                               transmission of AIDS\"<span class=\"token punctuation\">,</span>\n                               <span class=\"token property\">\"SEX\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Female\"</span>\n                           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token property\">\"Value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"8.8\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              ...many_more_objects of same format\n           <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For my chart I want the data to end up looking like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1993\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Burkina Faso\"</span><span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Ghana\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Kenya\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  ...<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2010\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Burkina Faso\"</span><span class=\"token operator\">:</span> <span class=\"token number\">80.4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Ghana\"</span><span class=\"token operator\">:</span> <span class=\"token number\">75.05</span><span class=\"token punctuation\">,</span>\n    ...\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<h4 id=\"formatting-the-data\"><a href=\"#formatting-the-data\" aria-label=\"formatting the data permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Formatting the data</h4>\n<p>Notice how the initial format has the odd <code class=\"language-text\">“dimension”</code> field which is unneeded, all that is needed is within <code class=\"language-text\">&quot;fact&quot;</code>‘s <code class=\"language-text\">&quot;dims&quot;</code> and <code class=\"language-text\">&quot;Value&quot;</code>. So, here I am grabbing those values and setting them to an individual object.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">initialReformat</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>fact<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">row</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    temp <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n    row <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>dims<span class=\"token punctuation\">;</span>\n    row<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> row<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I now have this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>\n   <span class=\"token punctuation\">{</span>\n     <span class=\"token constant\">COUNTRY</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Afghanistan'</span><span class=\"token punctuation\">,</span>\n     <span class=\"token constant\">YEAR</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'2010'</span><span class=\"token punctuation\">,</span>\n     <span class=\"token constant\">GHO</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Knowledge about sexual transmission of AIDS'</span><span class=\"token punctuation\">,</span>\n     <span class=\"token constant\">SEX</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Female'</span><span class=\"token punctuation\">,</span>\n     Value<span class=\"token punctuation\">:</span> <span class=\"token string\">'8.8'</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Next, I created an object, set each year to a key whose value is to be an array of every piece of data with a YEAR value correlating.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sortDataByYear</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> sortByYear <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  data<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">row</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sortByYear<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">.</span><span class=\"token constant\">YEAR</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sortByYear<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">.</span><span class=\"token constant\">YEAR</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      sortByYear<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">.</span><span class=\"token constant\">YEAR</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      sortByYear<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">.</span><span class=\"token constant\">YEAR</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> sortByYear<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Quite simple, check if year does not exist, if so, create a new array and push that data into it. Otherwise, push the data into the year array that has already been created.</p>\n<p>And I end up with this object:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n   <span class=\"token number\">1992</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">COUNTRY</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Malawi'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token constant\">YEAR</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1992'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token constant\">GHO</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Knowledge about sexual transmission of AIDS'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token constant\">SEX</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Male'</span><span class=\"token punctuation\">,</span>\n          Value<span class=\"token punctuation\">:</span> <span class=\"token string\">'0.0'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token operator\">...</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1993</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, the last function to get the necessitated data structure for the chart:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> finalData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> year <span class=\"token keyword\">in</span> sortByYear<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  finalData<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> year <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sortByYear<span class=\"token punctuation\">[</span>year<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>finalData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">.</span><span class=\"token constant\">COUNTRY</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      finalData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">.</span><span class=\"token constant\">COUNTRY</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n        <span class=\"token punctuation\">(</span>finalData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">.</span><span class=\"token constant\">COUNTRY</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> finalData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">.</span><span class=\"token constant\">COUNTRY</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>First, I made a brand new array to store the final data. Then, I created a new object for each year and set that year as one of the objects key/value pairs (<code class=\"language-text\">finalData.push({ year })</code>). Lastly, I looped through the array corresponding with the year from the previous functions returned object: <code class=\"language-text\">sortByYear</code>.</p>\n<p>Inside this array, I have two layers to check:</p>\n<ol>\n<li>Has the country been set as a key for the object in the final data array?</li>\n<li>If it has not, it means that I am seeing a different sex (gender), so I should average this number with the previous, <code class=\"language-text\">(finalData[i][obj.COUNTRY] + parseFloat(obj.Value)) / 2</code>.</li>\n</ol>\n<p><code class=\"language-text\">i</code> is used so the next year is in the next index of the array.</p>\n<p><a href=\"https://cdn-images-1.medium.com/max/1600/1*-2BFByeRl2z0UFbamfN91Q.png\">progression of data from a mess to sorted to arranged and finally to be presented visually</a></p>\n<p>We are at the arranged point. Though, a quick description of the creation of a react component will happen next. Then the visual presentation.</p>\n<h4 id=\"taking-a-look-at-the-rendering-of-a-react-component\"><a href=\"#taking-a-look-at-the-rendering-of-a-react-component\" aria-label=\"taking a look at the rendering of a react component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Taking a look at the rendering of a React Component</h4>\n<ol>\n<li>import React, { Component } from ‘react’</li>\n<li>Create a class and a constructor</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HIVKnowledge</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            quote<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token operator\">...</span></code></pre></div>\n<ol start=\"3\">\n<li>Import the data and when the “component mounts”, set the state of the data.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> HIVKnowledgeData <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../data/diseases-hiv-knowledge.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>where <span class=\"token constant\">I</span> left off above\n<span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    data <span class=\"token operator\">=</span> <span class=\"token function\">initialReformat</span><span class=\"token punctuation\">(</span>HIVKnowledgeData<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">componentDidMount</code> runs when the page is “mounted” or ready to load and whatever is put here affects the initial rendering.</p>\n<ol start=\"4\">\n<li>Final data management prior to rendering the page:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> sortByYear <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      finalData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sortByYear <span class=\"token operator\">=</span> <span class=\"token function\">sortDataByYear</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">...</span>then run the last data <span class=\"token keyword\">function</span> on sortByYear\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Check if the length is greater than zero, as <code class=\"language-text\">componentDidMount</code> does not occur immediately. So, at the first check of this if statement the data will be an empty array, which is not at all what we want to be inputted into our graph.</p>\n<h4 id=\"the-creation-of-the-chart-and-the-rendering-of-the-page\"><a href=\"#the-creation-of-the-chart-and-the-rendering-of-the-page\" aria-label=\"the creation of the chart and the rendering of the page permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The creation of the chart and the rendering of the page</h4>\n<p><code class=\"language-text\">npm install recharts</code></p>\n<p>What to import from recharts:</p>\n<p><code class=\"language-text\">import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from &#39;recharts&#39;;</code></p>\n<p>What to put into your index.html right above the <code class=\"language-text\">&lt;title&gt;</code> tag (also change that if you want the tab to say something other then React App).</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span>\n  <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span>\n  <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://code.jquery.com/jquery-2.1.3.min.js<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">integrity</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sha256-ivk71nXhz9nsyFDoYoGf2sbjrR9ddh+XDkCcfZxjvcM=<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">crossorigin</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>anonymous<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>What to put in your render’s return statement:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n     <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"chart bar HIV\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>h6<span class=\"token operator\">></span>Knowlege about sexual transmission <span class=\"token keyword\">of</span> <span class=\"token constant\">AIDS</span> <span class=\"token punctuation\">(</span>Average\n          Both Sexes<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h6<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>ResponsiveContainer width<span class=\"token operator\">=</span><span class=\"token string\">'100%'</span> height<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">300</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>LineChart\n                cx<span class=\"token operator\">=</span><span class=\"token string\">\"50%\"</span>\n                cy<span class=\"token operator\">=</span><span class=\"token string\">\"50%\"</span>\n                outerRadius<span class=\"token operator\">=</span><span class=\"token string\">\"80%\"</span>\n                data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>finalData<span class=\"token punctuation\">}</span>\n               <span class=\"token operator\">></span>\n               <span class=\"token operator\">&lt;</span>XAxis dataKey<span class=\"token operator\">=</span><span class=\"token string\">\"year\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n               <span class=\"token operator\">&lt;</span>YAxis <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n               <span class=\"token operator\">&lt;</span>CartesianGrid strokeDasharray<span class=\"token operator\">=</span><span class=\"token string\">\"3 3\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n               <span class=\"token operator\">&lt;</span>Tooltip <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n               <span class=\"token operator\">&lt;</span>Line\n                   connectNulls<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n                   type<span class=\"token operator\">=</span><span class=\"token string\">\"monotone\"</span>\n                   dataKey<span class=\"token operator\">=</span><span class=\"token string\">\"Zambia\"</span>\n                   stroke<span class=\"token operator\">=</span><span class=\"token string\">\"black\"</span>\n               <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n               <span class=\"token operator\">...</span>rest <span class=\"token keyword\">of</span> lines and closing tags</code></pre></div>\n<p>This is what will render on the page. This is JSX. The className is React’s way to set class. Otherwise, the <code class=\"language-text\">&lt;h6&gt;</code>is as one expects and notice how the graph is quite HTML’y as well. Notice, a defining factor of JSX components is the camelCase.</p>\n<p>As for the chart:</p>\n<p>The responsive container does exactly what one expects, gets larger and smaller based upon the screen size.</p>\n<p><code class=\"language-text\">width</code>, <code class=\"language-text\">cx</code>, <code class=\"language-text\">cy</code>, and <code class=\"language-text\">outerRadius</code> are not random numbers. This is a recipe to get a centered location for the chart on your page.</p>\n<p><code class=\"language-text\">data={finalData}</code> is how the data is inputted into the chart.</p>\n<p><code class=\"language-text\">&lt;XAxis datakey=”year” /&gt;</code> is what sets the years as the… x-axis, very complex.</p>\n<p><code class=\"language-text\">&lt;Tooltip /&gt;</code> creates a nice user interaction when hovering over data.</p>\n<p><code class=\"language-text\">&lt;Line … /&gt;</code> is each line with the color, country (key in the array), and <code class=\"language-text\">connectNulls</code> will do just that, if the next year is a distance away, the line will connect. Helpful with this data as many countries skip many years between studies.</p>\n<h4 id=\"export-the-component-at-end-of-file\"><a href=\"#export-the-component-at-end-of-file\" aria-label=\"export the component at end of file permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Export the component at end of file</h4>\n<p><code class=\"language-text\">export default HIVKnowledge</code></p>\n<h4 id=\"import-the-component-in-appjs\"><a href=\"#import-the-component-in-appjs\" aria-label=\"import the component in appjs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Import the component in App.js</h4>\n<p><code class=\"language-text\">import HIVKnowledge from ‘./poem-1-data/HIVKnowledge’</code></p>\n<h4 id=\"render-the-chart-component\"><a href=\"#render-the-chart-component\" aria-label=\"render the chart component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Render the chart component</h4>\n<p>Put <code class=\"language-text\">&lt;HIVKnowledge /&gt;</code> inside the div within the return statement of the render method.</p>\n<p>You should now see the the chart on the page.</p>\n<h2 id=\"utilising-the-wikiquotes-api-to-render-quotes\"><a href=\"#utilising-the-wikiquotes-api-to-render-quotes\" aria-label=\"utilising the wikiquotes api to render quotes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Utilising the WikiQuotes API to render quotes</h2>\n<ol>\n<li>I used this module readily available on github: <a href=\"https://github.com/natetyler/wikiquotes-api\">https://github.com/natetyler/wikiquotes-api</a></li>\n<li>Copy and paste it into a file in your app. I used a file called WikiQuote.js.</li>\n<li>Import jQuery at the top of this file:</li>\n<li><code class=\"language-text\">import * as $ from ‘jquery’</code></li>\n<li>Export the module:</li>\n<li><code class=\"language-text\">export const WikiquoteApi = ...</code></li>\n<li>Create the necessary error callback:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">error</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"5\">\n<li>Import into the chart component:</li>\n</ol>\n<p><code class=\"language-text\">import { WikiquoteApi, error } from ‘../WikiQuote.js’</code></p>\n<p>6a. Create the <code class=\"language-text\">success</code> callback function within the <code class=\"language-text\">componentDidMount</code> so that the <code class=\"language-text\">quote</code> variable is set when this is called:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">success</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">wikiData</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  quote <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>wikiData<span class=\"token punctuation\">.</span>quote<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>6b. Create a <code class=\"language-text\">checkQuoteLength</code> function that waits for the WikiQuote function to finish (this is asynchronous), repeatedly calling itself until that occurs, setting state immediately. Put this also in the <code class=\"language-text\">componentDidMount</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkQuoteLength</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>quote<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> quote<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>checkQuoteLength<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>6c. Invoke <code class=\"language-text\">checkQuoteLength</code>:</p>\n<p><code class=\"language-text\">checkQuoteLength()</code></p>\n<p>6d. Call the <code class=\"language-text\">WikiquoteApi.getRandomQuote(title_to_search_in_wikiquotes, success, error)</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidMount</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> quote <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">success</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">wikiData</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    quote <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>wikiData<span class=\"token punctuation\">.</span>quote<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"`</span></span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkQuoteLength</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>quote<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> quote<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>checkQuoteLength<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  WikiquoteApi<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomQuote</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HIV/AIDS\"</span><span class=\"token punctuation\">,</span> success<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n  data <span class=\"token operator\">=</span> <span class=\"token function\">initialReformat</span><span class=\"token punctuation\">(</span>HIVKnowledgeData<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">checkQuoteLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"7\">\n<li>Render the Quote:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n     <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"chart bar HIV\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>h6<span class=\"token operator\">></span>Knowlege about sexual transmission <span class=\"token keyword\">of</span> <span class=\"token constant\">AIDS</span> <span class=\"token punctuation\">(</span>Average\n          Both Sexes<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h6<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>ResponsiveContainer width<span class=\"token operator\">=</span><span class=\"token string\">'100%'</span> height<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">300</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">...</span></code></pre></div>\n<p>Voila! Now the quote exists on the webpage.</p>\n<p>But you only have a single page with one chart, create more charts at this time before moving on if you are planning to. Next, what will be shown is how to go from one page to the next in a simple way.</p>\n<hr />\n<h2 id=\"dynamically-changing-pages-and-passing-props\"><a href=\"#dynamically-changing-pages-and-passing-props\" aria-label=\"dynamically changing pages and passing props permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamically changing pages and passing props</h2>\n<h3 id=\"creating-some-buttons\"><a href=\"#creating-some-buttons\" aria-label=\"creating some buttons permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating some buttons:</h3>\n<p>I used <a href=\"https://www.css3buttongenerator.com/\">CSS Button Generator</a> to make my life easier.</p>\n<h3 id=\"creating-a-buttons-component-for-a-left-and-a-right-button\"><a href=\"#creating-a-buttons-component-for-a-left-and-a-right-button\" aria-label=\"creating a buttons component for a left and a right button permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a buttons component, for a left and a right button:</h3>\n<ol>\n<li>Make a file called <code class=\"language-text\">Buttons</code> that will contain the HTML for the buttons.</li>\n<li>Create a class component (same as previously done) with two initial states, <code class=\"language-text\">leftButtonDisable: true</code> and <code class=\"language-text\">rightButtonDisable: false</code>.</li>\n<li>In the return create the buttons:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"buttons\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>button\n    className<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span>\n    value<span class=\"token operator\">=</span><span class=\"token string\">\"left\"</span>\n    disabled<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>leftButtonDisable<span class=\"token punctuation\">}</span>\n    onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">></span>\n    ◀\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>button\n    className<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span>\n    value<span class=\"token operator\">=</span><span class=\"token string\">\"right\"</span>\n    disabled<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>rightButtonDisable<span class=\"token punctuation\">}</span>\n    onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">></span>\n    ▶\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<ol start=\"4\">\n<li>Create the handleClick class method:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token string\">\"left\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token operator\">--</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onPageChange</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token operator\">++</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onPageChange</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Set value to zero, and if it is left then decrement it, otherwise increment it. And pass that value into… <code class=\"language-text\">this.props.onPageChange</code>. Will go over this next.</p>\n<ol start=\"5\">\n<li>Export the component</li>\n</ol>\n<h3 id=\"within-the-appjs\"><a href=\"#within-the-appjs\" aria-label=\"within the appjs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Within the App.js:</h3>\n<ol>\n<li><code class=\"language-text\">import Buttons from ‘./Buttons’</code></li>\n<li>Create a <code class=\"language-text\">currentPage</code> state and set it to zero: <code class=\"language-text\">currentPage: 0</code></li>\n<li>Create an <code class=\"language-text\">onPageChange</code> class method and set the <code class=\"language-text\">this</code> context to allow the corresponding page to render</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onPageChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onPageChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">onPageChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> currentPage <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>currentPage <span class=\"token operator\">+</span> value\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> currentPage <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li>Put the <code class=\"language-text\">Buttons</code> component in the render and pass <code class=\"language-text\">onPageChange</code> and <code class=\"language-text\">currentPage</code> as props to the <code class=\"language-text\">Buttons</code> component</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Buttons\n  currentPage<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">}</span>\n  onPageChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onPageChange<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h3 id=\"back-to-the-buttons-component\"><a href=\"#back-to-the-buttons-component\" aria-label=\"back to the buttons component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Back to the Buttons Component</h3>\n<p>Use the life cycle method <code class=\"language-text\">componentWillRecieveProps</code> to know when to disable buttons</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentWillReceiveProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> currentPage <span class=\"token operator\">=</span> nextProps<span class=\"token punctuation\">.</span>currentPage\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentPage <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      leftButtonDisable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentPage <span class=\"token operator\">===</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      rightButtonDisable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      leftButtonDisable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      rightButtonDisable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This runs whenever the props that <code class=\"language-text\">App.js</code> is passing down to <code class=\"language-text\">buttons.js</code> changes, in this case, <code class=\"language-text\">currentPage</code> changes. When currentPage changes <code class=\"language-text\">componentWillReceiveProps</code> runs and <code class=\"language-text\">nextProps</code> is an object with key/values of the props being passed down as the incoming value. This allows you to alter the state at this instance, and in turn alter the component being viewed visually on the page.</p>\n<h3 id=\"rendering-different-pages-based-upon-currentpage\"><a href=\"#rendering-different-pages-based-upon-currentpage\" aria-label=\"rendering different pages based upon currentpage permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rendering different pages based upon currentPage</h3>\n<ol>\n<li>Create a render page class method in <code class=\"language-text\">App.js</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">renderPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">curPage</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>curPage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>HIVKnowledge <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>LifeExpectancy <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Something is wrong with your buttons\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>call this function in the <code class=\"language-text\">return</code> statement of the <code class=\"language-text\">render</code> class method</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">renderPage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span>Buttons\n    currentPage<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">}</span>\n    onPageChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onPageChange<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>And now, possibly, hopefully you know how to create a multi-page react app (It’s still single page though).</p>\n<h3 id=\"deploying-the-app-to-github-pages\"><a href=\"#deploying-the-app-to-github-pages\" aria-label=\"deploying the app to github pages permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deploying the App to Github Pages</h3>\n<p>Info is thanks to <a href=\"https://www.freecodecamp.org/news/surge-vs-github-pages-deploying-a-create-react-app-project-c0ecbf317089/\">this Medium Article</a>.</p>\n<ol>\n<li>Go to your <code class=\"language-text\">package.json</code> and add two new fields as so:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token string\">\"private\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//below this add:</span>\n    <span class=\"token string\">\"homepage\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://github_username.github.io/repository_name\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token string\">\"scripts\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"eject\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"react-scripts-eject\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//below this add:</span>\n        <span class=\"token string\">\"deploy: \"</span>npm run build<span class=\"token operator\">&amp;&amp;</span>gh<span class=\"token operator\">-</span>pages <span class=\"token operator\">-</span>d build\"\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>Then do this: <code class=\"language-text\">npm install --save-dev gh-pages</code>. Push your code to master.</li>\n<li><code class=\"language-text\">npm run build</code>which will create a bundle of all the code in your application (after running it, look in your file system and you will see a build folder containing all of the code in a tightly woven, unreadable format).</li>\n<li><code class=\"language-text\">npm run deploy</code> is the last step in the terminal</li>\n<li>Go onto your GitHub account. Go to the applications page, then to settings, scroll down until you reach the GitHub Pages, click the Source dropdown and find <code class=\"language-text\">gh-pages branch</code>then wait a moment and you are…</li>\n</ol>\n<p>Deployed!</p>\n<p>In the future, if you edit some code or something similar be sure to run <code class=\"language-text\">npm run build</code> then <code class=\"language-text\">npm run deploy</code> for your deployed app to be affected!</p>\n<h2 id=\"in-closing\"><a href=\"#in-closing\" aria-label=\"in closing permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In Closing</h2>\n<p>No matter your skill level in React, I aimed to make sure this article held nuances that anyone can learn from. This was written directly after completing the aforementioned project so the troubles, the tribulations are fresh on my mind (in relation to the person I am this moment, while I am typing these words, that are reference).</p>\n<p>Still there are countless resources in React, and this is only a few of a giant assortment of resources. If you read this but know there is something else you want to do, check this repo out: <a href=\"https://github.com/brillout/awesome-react-components\">awesome-react-components</a>.</p>\n<p>And this is the repo: <a href=\"https://github.com/jMuzsik/quote_and_a_chart\">Quote and a Chart</a></p>\n<p>Thanks for reading!</p>","fields":{"slug":"/posts/deploy-create-react-app/","tagSlugs":["/tag/javascript/","/tag/frontend/","/tag/create-react-app/","/tag/recharts/","/tag/wikipedia/","/tag/data-visualisation/"]},"frontmatter":{"date":"2018-01-19","description":"I recently built an app utilising data from the WHO (World Health Organisation), the WikiQuotes API, Recharts, lots of CSS and JS, and, of course, passion for the subject. This will show you how to do it minutely.","tags":["Javascript","Frontend","Create React App","Recharts","Wikipedia","Data Visualisation"],"title":"How to Deploy a Create React App with Recharts, the WikiQuotes API, and Datasets"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/deploy-create-react-app/"}}}