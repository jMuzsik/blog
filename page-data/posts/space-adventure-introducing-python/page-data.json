{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/space-adventure-introducing-python/","webpackCompilationHash":"37e436b5f054f2840569","result":{"data":{"markdownRemark":{"id":"d23a3d44-b5cd-5cc5-a9d1-df31bd4d26d7","html":"<p><span style=\"initial-letter: 2\">T</span>his article is not targeting the absolute beginner. It is specifically for JS Developers or the like looking for a fun introduction to the incredibly popular programming language Python. Many concepts explained: multiple inheritance, list comprehensions, the basics, and peculiarities of the language. All code can instantly be copied/pasted into a repl, and there is a repl near the end of the article to look directly at.</p>\n<h3 id=\"in-a-universe-of-90328443435329598-alien-beings-two-new-beings-came-from-the-void\"><a href=\"#in-a-universe-of-90328443435329598-alien-beings-two-new-beings-came-from-the-void\" aria-label=\"in a universe of 90328443435329598 alien beings two new beings came from the void permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In a universe of 90328443435329598 alien beings. Two new beings came from the voidâ€¦</h3>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*P9UGX6-8d6sOBpHDi2oe3Q.png\" alt=\"Block of code background with python logo in front\"></p>\n<div style=\"text-align: center\"><small>Python Alien</small></div>\n<blockquote>\n<p>Hello human. Your name is Marcel or so I hear. And you are one of 7530305890 human beings.</p>\n<p>I am a python and my name is Guido, one of 3 python beings.</p>\n<p>Now, there are: 90328443435329600 alien beings.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">total_aliens <span class=\"token operator\">=</span> <span class=\"token number\">90328443435329598</span>\ntotal_humans <span class=\"token operator\">=</span> <span class=\"token number\">7530305889</span>\ntotal_pythons <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'In a universe of:'</span><span class=\"token punctuation\">,</span> total_aliens<span class=\"token punctuation\">,</span> <span class=\"token string\">'alien beings. Two new beings came from the void...'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Alien</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> type_of<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>being <span class=\"token operator\">=</span> type_of\n        <span class=\"token keyword\">global</span> total_aliens\n        total_aliens <span class=\"token operator\">=</span> total_aliens <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">(</span>Alien<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token string\">'human'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">global</span> total_humans\n        total_humans <span class=\"token operator\">=</span> total_humans <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">go_back_to_earth</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Python</span><span class=\"token punctuation\">(</span>Alien<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">global</span> total_pythons\n        total_pythons <span class=\"token operator\">=</span> total_pythons<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n\nmarcel <span class=\"token operator\">=</span> Human<span class=\"token punctuation\">(</span><span class=\"token string\">'Marcel'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> marcel<span class=\"token punctuation\">.</span>being<span class=\"token punctuation\">,</span> <span class=\"token string\">'. Your name is '</span><span class=\"token punctuation\">,</span> marcel<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'or so I hear. And you are one of'</span><span class=\"token punctuation\">,</span> total_humans<span class=\"token punctuation\">,</span> <span class=\"token string\">'human beings.'</span><span class=\"token punctuation\">)</span>\n\nguido <span class=\"token operator\">=</span> Python<span class=\"token punctuation\">(</span><span class=\"token string\">'Guido'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I am a'</span><span class=\"token punctuation\">,</span> guido<span class=\"token punctuation\">.</span>being<span class=\"token punctuation\">,</span><span class=\"token string\">'and my name is'</span><span class=\"token punctuation\">,</span> guido<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">'one of'</span><span class=\"token punctuation\">,</span> total_pythons<span class=\"token punctuation\">,</span> <span class=\"token string\">'python beings.'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Now there are:'</span><span class=\"token punctuation\">,</span> total_aliens<span class=\"token punctuation\">,</span> <span class=\"token string\">'alien beings.'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div style=\"text-align: center\"><small>classes, multiple inheritance, __init__, def, self, global</small></div>\n<p><code class=\"language-text\">total_aliens = 90328443435329598</code>. That is to say that Python is dynamically typed.</p>\n<p><code class=\"language-text\">class Alien(object)</code>: as well as <code class=\"language-text\">class Human(Alien)</code>: expresses that the Alien class inherits from class object while Human inherits from class Alien.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> type_of<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>being <span class=\"token operator\">=</span> type_of\n    <span class=\"token keyword\">global</span> total_aliens\n    total_aliens <span class=\"token operator\">=</span> total_aliens <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n<div style=\"text-align: center\"><small>def, __init__, self, and global</small></div>\n<p><code class=\"language-text\">def</code> is simply how a function is created. it is like <code class=\"language-text\">function</code> in JavaScript or <code class=\"language-text\">func</code> in Golang.</p>\n<p><code class=\"language-text\">__init__</code> is what is automatically run when a new instance of a class is created, it is the initialiser.</p>\n<p><code class=\"language-text\">self</code>: Every method in a class necessitates this first argument. It does not have to be self but this is the convention. This is what the purpose of <code class=\"language-text\">self</code> is, taken from a concise description on Stack Overflow:</p>\n<ul>\n<li><code class=\"language-text\">instance_object.parent_class_method(arg)</code> internally converts to: <code class=\"language-text\">parent_class.parent_class_method(instance_object, arg)</code>. So <code class=\"language-text\">self</code> binds the instance object to the method invocation, similar to <code class=\"language-text\">this</code> in JS, with some subtleties to be aware of.</li>\n</ul>\n<p>Lastly, <code class=\"language-text\">global</code>: writing it as above references the global variable so it can be altered within the functions scope.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token string\">'human'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">go_back_to_earth</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<div style=\"text-align: center\"><small>super and pass</small></div>\n<p><code class=\"language-text\">super</code> interacts with the direct parent class that Human inherits from, Alien. The argument sets <code class=\"language-text\">self.being</code> of the new instance to be equal to <code class=\"language-text\">human</code>.</p>\n<p><code class=\"language-text\">pass</code> is necessary in Python when you write an empty function, an empty <code class=\"language-text\">if/else</code> or anything of the like. If left without <code class=\"language-text\">pass</code> an error occurs.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">marcel <span class=\"token operator\">=</span> Human<span class=\"token punctuation\">(</span><span class=\"token string\">'Marcel'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>marcel<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> marcel<span class=\"token punctuation\">.</span>being<span class=\"token punctuation\">)</span></code></pre></div>\n<div style=\"text-align: center\"><small>Instance of class, print, dot notation</small></div>\n<p>A new instance is created as shown. <code class=\"language-text\">print</code> is how one logs out values.</p>\n<p>Grabbing values associated with the instance of the class is done with dot notation.</p>\n<p>Ok, onto functional programming and a continuation of the story.</p>\n<hr />\n<p><i>Human, I have six tasks you must accomplish to leave this planet:</i></p>\n<p><i>To leave this planet, there is a generator function that runs each instance in which you overcome a problem. This builds up fuel for your spaceship home. This is the function:</i></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">liftoff <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div style=\"text-align: center\"><small>[Generator function](https://stackoverflow.com/questions/1756096/understanding-generators-in-python), there will be a longer explanation later</small></div>\n<p><i>First, I give you a list(<code class=\"language-text\">[&#39;str_1&#39;, &#39;str_2&#39;, â€¦]</code>), six strings will be inside it. You must check what the first letter of each string is numerically (a is 0, b is 1, etc.), then check if this index exists in the list, and finally add that string to a new list. Return the new list.</i></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">strings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'zoological'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fuggedaboutit'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'turtle'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'buttercup'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ant'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'damnation'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rabbit'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">filter_strings</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    alphabet <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'j'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'k'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'m'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'q'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'t'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'u'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">]</span>\n    selected_strs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    strs_first_letter <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> <span class=\"token builtin\">str</span> <span class=\"token keyword\">in</span> strs<span class=\"token punctuation\">:</span>\n        strs_first_letter<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> letter <span class=\"token keyword\">in</span> strs_first_letter<span class=\"token punctuation\">:</span>\n        idx <span class=\"token operator\">=</span> alphabet<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> idx <span class=\"token operator\">>=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            selected_strs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> selected_strs\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>filter_strings<span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div style=\"text-align: center\"><small>list, for in, append, index, len</small></div>\n<p>This returns <code class=\"language-text\">[&#39;damnation&#39;, &#39;fuggedaboutit&#39;, &#39;zoological&#39;, &#39;buttercup&#39;]</code>.</p>\n<p><code class=\"language-text\">[]</code>: in this case it is a list, not an array. They are slightly different.</p>\n<ul>\n<li>The major difference: <code class=\"language-text\">array([3, 6, 9, 12])/3.0</code> (array syntax) returns <code class=\"language-text\">array([1, 2, 3, 4])</code> while <code class=\"language-text\">[3, 6, 9, 12]/3.0</code> (list syntax) returns an error.</li>\n</ul>\n<p><code class=\"language-text\">for str in strs</code>: is the predominant type of loop one sees in Python. It iterates through each indexâ€™d value starting at the zeroth index.</p>\n<p><code class=\"language-text\">some_list.append(some_value)</code> pushes the specified value to the end of the list.</p>\n<p><code class=\"language-text\">some_list.index(some_value)</code> looks for <code class=\"language-text\">some_value</code> inside the list and returns the first index where the value exists. If it is not found, a <code class=\"language-text\">ValueError</code> exception occurs.</p>\n<hr />\n<p><i>You are at: 17% fuel. Now, a different task. Another function. First argument: a single number. Second argument: a dictionary (<code class=\"language-text\">{â€˜some_key&#39;: &#39;some_value&#39;, â€¦}</code>) containing a key called a<em>list with a value that is a list full of strings (`â€˜a</em>listâ€™:[â€¦]<code class=\"language-text\">) and a separator (</code>â€˜separatorâ€™: â€˜somethingâ€™<code class=\"language-text\">). As so:</code>{â€˜a_listâ€™: [â€¦], â€˜separatorâ€™: â€˜somethingâ€™}`. The first argument specifies how many strings to use from the list. Store each string concatenated with the separator into a single variable or memory location and return that.</i></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">seperate_arbitrary_amount_words</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> dic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    word_sequence <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        word_sequence <span class=\"token operator\">+=</span> dic<span class=\"token punctuation\">[</span><span class=\"token string\">'a_list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>dic<span class=\"token punctuation\">[</span><span class=\"token string\">'seperator'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> word_sequence\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>seperate_arbitrary_amount_words<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'a_list'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Trump'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'That thing over there'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Global warming'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'monkeys'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'coconuts'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">'seperator'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">' is awful! '</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div style=\"text-align: center\"><small>range, dictionary</small></div>\n<p>This returns: <code class=\"language-text\">â€˜Trump is awful! That thing over there is awful! Global warming is awful! â€™</code></p>\n<p><code class=\"language-text\">range(num)</code> is an iterator of the number specified. If only one argument it iterates from zero to the number minus one. Range can take three arguments, it is similar to a condensed for loop: <code class=\"language-text\">range(-10, -100, -30)</code> => <code class=\"language-text\">-10 -40 -70</code> with whatever <code class=\"language-text\">for this_thing_is in range(...)</code> being the => values.</p>\n<p><code class=\"language-text\">{...}</code>: dictionaries are unordered key/value pairs or associative arrays. The keys must be strings and to access the values through bracket notation one must also insert a string value, or a variable name.</p>\n<hr />\n<p><i>Your now at: 34%. Next, I give a more confusing challenge. For one, you do not know how many arguments are given! The first set of arguments contain either a number, the value None, or a string. The second set contains key/value pairs associated in this way: <code class=\"language-text\">some_keyword=some_value</code>. <code class=\"language-text\">some_keyword</code> will be a string. <code class=\"language-text\">some_value</code> will be a number. Return a dictionary. One key/value. The key must be only the strings I first gave you (the arguments) in reverse order. The value must be a concatenated string, only use the string in the keywords from the zero index up to the number specified as the value, all into one single string without spaces.\n</i></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">rev_args_key_concat_keywords_val</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>keywords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    rev_args_key <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    concat_keywords_val <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    args_len <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n    args <span class=\"token operator\">=</span> <span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> arg <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> arg <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n        <span class=\"token keyword\">elif</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            rev_args_key <span class=\"token operator\">+=</span> arg\n        <span class=\"token keyword\">if</span> idx <span class=\"token operator\">!=</span> args_len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            rev_args_key <span class=\"token operator\">+=</span> <span class=\"token string\">' '</span>\n    <span class=\"token keyword\">for</span> keyword <span class=\"token keyword\">in</span> keywords<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>keywords<span class=\"token punctuation\">[</span>keyword<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            concat_keywords_val <span class=\"token operator\">+=</span> keyword<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\n    dic<span class=\"token punctuation\">[</span>rev_args_key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> concat_keywords_val\n    <span class=\"token keyword\">return</span> dic\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rev_args_key_concat_keywords_val\n      <span class=\"token punctuation\">(</span><span class=\"token string\">'animal'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'amazing'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n       <span class=\"token string\">'big'</span><span class=\"token punctuation\">,</span> element<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> phone<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> anteater<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div style=\"text-align: center\"><small>tuples (reversed), enumerate, if/elif/else, is None, isinstance(arg, int)</small></div>\n<p>This logs out: <code class=\"language-text\">{â€˜big amazing animalâ€™: â€˜elephantâ€™}</code>.</p>\n<p>If you print out args prior to <code class=\"language-text\">reversed(args)</code> you see that args is: <code class=\"language-text\">(â€˜animalâ€™, â€™amazing&#39;, None, 6, â€˜big&#39;)</code>. This is a tuple. A sequence of immutable objects. Tuples are written with parentheses and they cannot be altered the same way as a list or array, as in, altering at specific indexes.</p>\n<p><code class=\"language-text\">enumerate</code> allows one to have an automatic counter and access the values simultaneously.</p>\n<p><code class=\"language-text\">if/elif/else</code> is how to write if/else statements.</p>\n<p><code class=\"language-text\">is None</code> is how one returns a true or false value for checking the <code class=\"language-text\">None</code> value. It is similar to <code class=\"language-text\">null</code> but more so <code class=\"language-text\">undefined</code> in JS as many instances of code can return this value such as when one alters a list through a higher order function that one would not expect to return something or when a function does not return anything, it returns <code class=\"language-text\">None</code>.</p>\n<p><code class=\"language-text\">isinstance(arg, int)</code> is used to check if the arg is an instance of a specified class. <code class=\"language-text\">int</code> in this case but something like this can also be expressed:</p>\n<ul>\n<li><code class=\"language-text\">isinstance(marcel, Alien)</code> will return true. Classes, strings, ints, and all else you expect can be checked in this way.</li>\n</ul>\n<hr />\n<p><i>Ok, good. You are at 51%. Now, an interesting one. You are given a matrix. Three lists in a list, each list has four strings inside. First, make a new list associating each index of each list as so: (<code class=\"language-text\">[[[0][0], [1][0], [2][0]â€¦],[[0][1], [1][1]â€¦], ...]</code>) then, flatten each list to a single string, and finally join that list into one single string. You can fit all of this logic into one statementâ€¦ a list comprehension.</i></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'You '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'it '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'way. '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'magically, '</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'must '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'look '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Very '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'important '</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'make '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'this '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'extremely, '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'to do!'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">flatten_matrix</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span>\n        <span class=\"token builtin\">str</span> <span class=\"token keyword\">for</span> sublist <span class=\"token keyword\">in</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> matrix<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> <span class=\"token builtin\">str</span> <span class=\"token keyword\">in</span> sublist\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flatten_matrix<span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div style=\"text-align: center\"><small>This needs explanationâ€¦</small></div>\n<p>This returns: <code class=\"language-text\">You must make it look this way. Very extremely, magically, important thing to do!</code></p>\n<p>First: <code class=\"language-text\">[[row[i] for row in matrix] for i in range(4)]</code>. The same thing:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">transposed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    transposed_row <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> matrix<span class=\"token punctuation\">:</span>\n        transposed_row<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    transposed<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>transposed_row<span class=\"token punctuation\">)</span></code></pre></div>\n<div style=\"text-align: center\"><small>new list => loop through rows => append values into new row => append row into new list</small></div>\n<p>One must think from the most outward brackets/logic in.</p>\n<p>So: <code class=\"language-text\">[all_the_logic]</code> is to say: create a new list and whatever is done inside here will determine what the list looks like in the end.</p>\n<p><code class=\"language-text\">[[some_inner_logic] for i in range(4)]:</code> This will specify there to be 4 rows and whatever <code class=\"language-text\">[row[i] for row in matrix]</code> results in at each instance is what each row will be.</p>\n<p><code class=\"language-text\">[row[i] for row in matrix]</code> means to use the index, i (0, 1, 2, 3) from range as be aware it is constant while the first, second, third, and fourth row is being created. During each row creation this occurs:</p>\n<ul>\n<li>Loop through each row in <code class=\"language-text\">matrix</code> => push value at <code class=\"language-text\">row[i]</code> into this newly created list => append this list to the initially created list.</li>\n</ul>\n<p>At this point this is what is created: <code class=\"language-text\">[[&#39;Youâ€™, â€˜must&#39;, â€˜make&#39;], [&#39;it&#39;, â€˜look&#39;, â€˜this&#39;], [&#39;way.&#39;, â€˜Very&#39;, â€˜extremely,&#39;], [&#39;magically&#39;, â€˜important&#39;, â€˜to do!&#39;]]</code>. A transposed matrix.</p>\n<p>Onto: <code class=\"language-text\">[str for sublist in [transposed_matrix] for str in sublist]</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">flat_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> sublist <span class=\"token keyword\">in</span> matrix<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> <span class=\"token builtin\">str</span> <span class=\"token keyword\">in</span> sublist<span class=\"token punctuation\">:</span>\n        flat_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div style=\"text-align: center\"><small>new list => individual string in row => append strings to new list</small></div>\n<p>Again, outward brackets to innermost.</p>\n<p>Create new list: <code class=\"language-text\">[result_of_logic]</code></p>\n<p>Read from the furthest-to-left for loop: <code class=\"language-text\">sublist in [transposed_matrix]</code> is to say: loop through each list within the matrix, starting at the first.</p>\n<p>Then read onto the next for loop: <code class=\"language-text\">for str in sublist</code>. This equates to saying to loop through each <code class=\"language-text\">str</code> within this <code class=\"language-text\">sublist</code>. That is the value now available to append to the list.</p>\n<p>Lastly, look at the beginning of the list comprehension: <code class=\"language-text\">str</code> . That is what is appended to the list: <code class=\"language-text\">[&#39;current_str&#39;, &#39;second_str&#39;, ...]</code>. So the left-most value is what is, in a way, pushed into the newly created list until the loop is finished. As if <code class=\"language-text\">append</code> automatically occurs.</p>\n<p>As for: <code class=\"language-text\">&#39;&#39;.join(final_list)</code> , <code class=\"language-text\">&#39;&#39;</code> is the string separator.</p>\n<p>Notice how the left-most <code class=\"language-text\">for</code> loop is what first occurs and the further to the right one goes is the nesting.</p>\n<hr />\n<p><i>Ok, now you are at 68%, only two left to go! This one I need you to create a factory function. There will be five functions to implement. <code class=\"language-text\">append</code> (push to end of list), <code class=\"language-text\">extend</code> (concat one list to another list), <code class=\"language-text\">insert</code> (insert item into specific index), <code class=\"language-text\">remove</code> (removes each instance of item specified), and <code class=\"language-text\">pop</code> (pop off final item in list). You cannot use the higher order function equivalents and each function that you create <strong>cannot mutate the original list</strong>. You are given three or four arguments.</p>\n<ol>\n<li>a list</li>\n<li>the name of the function as a string</li>\n<li>the one argument the function needs, index if it needs four (for insert)</li>\n<li>an item (only needed for insert)</li>\n</ol>\n<p>Ok, good luck!</i></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">implement_higher_order_funcs</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> func_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>the_list<span class=\"token punctuation\">,</span> item_to_append<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> the_list <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>item_to_append<span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>list_one<span class=\"token punctuation\">,</span> list_two<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> list_one <span class=\"token operator\">+</span> list_two\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>the_list<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> the_list<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> the_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>the_list<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> the_list <span class=\"token keyword\">if</span> x <span class=\"token operator\">!=</span> item<span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>the_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> the_list<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>the_list<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">if</span> func_name <span class=\"token operator\">==</span> <span class=\"token string\">'append'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> append<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">elif</span> func_name <span class=\"token operator\">==</span> <span class=\"token string\">'extend'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> extend<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">elif</span> func_name <span class=\"token operator\">==</span> <span class=\"token string\">'insert'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> insert<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">elif</span> func_name <span class=\"token operator\">==</span> <span class=\"token string\">'remove'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> remove<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">elif</span> func_name <span class=\"token operator\">==</span> <span class=\"token string\">'pop'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> pop<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></code></pre></div>\n<div style=\"text-align: center\"><small>slices, list concatenation</small></div>\n<p>Know that each of these functions are not the optimal way to do this. Using the associated higher order function is much quicker. Also, know that the higher order functions all return <code class=\"language-text\">None</code> except <code class=\"language-text\">pop</code> which returns what was popped.</p>\n<p><code class=\"language-text\">append</code> and <code class=\"language-text\">extend</code>: This is simply a subtlety of Python. Adding a list to another list automatically concats the two lists. <code class=\"language-text\">li.append(item)</code> and <code class=\"language-text\">li.extend(other_li)</code> is the proper syntax but these two options mutate the original list while the ones written above do not. <code class=\"language-text\">other_li</code> in <code class=\"language-text\">extend</code> is not mutated though.</p>\n<p><code class=\"language-text\">insert</code> and <code class=\"language-text\">pop</code> both use slices in this case. Iâ€™ll focus on insert . Notice: <code class=\"language-text\">the_list[:idx]</code> : this means to slice the list up to the index but not including it. <code class=\"language-text\">the_list[idx:]</code> : is to say to slice from and including the index up to the last index of the list.</p>\n<p><code class=\"language-text\">remove</code> : a simple list comprehension (they are extremely fast operations btw). <code class=\"language-text\">[x for x in the_list if x != item]</code>: <code class=\"language-text\">new_list = []</code> => <code class=\"language-text\">for x in the_list</code>: => <code class=\"language-text\">if x != item</code>: => <code class=\"language-text\">new_list.append(x)</code> or, but not technically <code class=\"language-text\">new_list += [x]</code>. Though, be aware that the real <code class=\"language-text\">li.remove(item)</code> solely removes the first occurrence of the item. This remove removes all occurrences.</p>\n<hr />\n<p><i>Very well done, onto the next one. Your at 85% fuel, this is the last one! Next one is a bit of an oddity as it is two functions in one. I am to give you a wide assortment of keywords and arguments. Your function will be called multiple times with a random amount of arguments or no arguments. And/or a multiple assortment of keywords. I need you to store all the argument values that I give you in a non-global list, and all the keyword values in a non-global dictionary. Return a dictionary as so: <code class=\"language-text\">{&#39;the_list&#39;: [...], &#39;the_dictionary&#39;: {...}}</code>. Each time the function is called the list is altered or the dictionary depending upon the input and <strong>all values are appended to the previous calls values</strong>.</p>\n<p>In the end, the final calls list is unpacked as the first argument and the dictionary is unpacked as the second argument into another function.</i></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">dictionary_and_list</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> li<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dic<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>keywords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> arg <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">:</span>\n            li<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>keywords<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> keywd <span class=\"token keyword\">in</span> keywords<span class=\"token punctuation\">:</span>\n            dic<span class=\"token punctuation\">[</span>keywd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> keywords<span class=\"token punctuation\">[</span>keywd<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'a_list'</span><span class=\"token punctuation\">:</span> li<span class=\"token punctuation\">,</span> <span class=\"token string\">'a_dictionary'</span><span class=\"token punctuation\">:</span> dic<span class=\"token punctuation\">}</span>\n\ndictionary_and_list<span class=\"token punctuation\">(</span><span class=\"token string\">'Ok, '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'you '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'are done, '</span><span class=\"token punctuation\">)</span>\ndictionary_and_list<span class=\"token punctuation\">(</span><span class=\"token string\">'it is time '</span><span class=\"token punctuation\">,</span> heading<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> back<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\ndictionary_and_list<span class=\"token punctuation\">(</span><span class=\"token string\">'to leave this '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Python world. '</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'Congratulations on all your accomplishments! '</span><span class=\"token punctuation\">,</span> to<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ndictionary_and_list<span class=\"token punctuation\">(</span><span class=\"token string\">'Goodbye!'</span><span class=\"token punctuation\">,</span> earth<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">back_to_earth</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> heading<span class=\"token operator\">=</span><span class=\"token string\">'Is'</span><span class=\"token punctuation\">,</span> back<span class=\"token operator\">=</span><span class=\"token string\">'it'</span><span class=\"token punctuation\">,</span> to<span class=\"token operator\">=</span><span class=\"token string\">'yet'</span><span class=\"token punctuation\">,</span> earth<span class=\"token operator\">=</span><span class=\"token string\">'time?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  last_words <span class=\"token operator\">=</span> <span class=\"token string\">'Ok, your there: '</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>liftoff<span class=\"token punctuation\">.</span>__next__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'%! '</span>\n  <span class=\"token keyword\">for</span> arg <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">:</span>\n    last_words <span class=\"token operator\">+=</span> arg\n  last_words <span class=\"token operator\">+=</span> <span class=\"token string\">'\\nHeading\\n'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>heading<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\nback\\n'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>back<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\nto\\n'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\nearth!\\n'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>earth<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>last_words<span class=\"token punctuation\">)</span>\n\nback_to_earth<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>dictionary_and_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a_list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>dictionary_and_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a_dictionary'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div style=\"text-align: center\"><small>mutating default arguments, unpacking a list, unpacking an object</small></div>\n<p><code class=\"language-text\">(*args, li=[], dic={}, **keywords)</code>: Notice that the two arguments that are not keywords or arguments are in between these two calls, this is required.</p>\n<p>But the really odd part, why is <code class=\"language-text\">li</code> and <code class=\"language-text\">dic</code> continually mutated during each function call? <strong>Python does not create a copy of each argument for each function call</strong> but holds a reference to the original default argument, and if one is not careful they can easily fall into the trap of creating a function that is not pure.</p>\n<p>As for this: <code class=\"language-text\">back_to_earth(*dictionary_and_list()[&#39;a_list],</code> : this is how one can unpack a list into a function so each item in the list becomes an individual argument. Values are grabbed with <code class=\"language-text\">*args</code>. As for <code class=\"language-text\">**dictionary_and_list()[&#39;a_dictionary])</code>: this unpacks the dictionaries values into the functions arguments. Each keyword in the function that has an associated key in the dictionary will be given that value.</p>\n<p>And what the code outputs:</p>\n<blockquote>\n<p>Ok, youâ€™re there: 100%! Ok, you are done, it is time to leave this Python world. Congratulations on all your accomplishments! Goodbye!</p>\n<p>Heading</p>\n<p>3</p>\n<p>back</p>\n<p>2</p>\n<p>to</p>\n<p>1</p>\n<p>earth!</p>\n<p>0</p>\n</blockquote>\n<p>Last but not least, after each function was finished I ran <code class=\"language-text\">liftoff.__next__()</code>. As you can see in the code below. One thing to know. If it is run one more time an error occurs. Why? Well, generator functions can only be read once and never again. So when the iteration is finished, there is no longer a <code class=\"language-text\">.__next__()</code> and all previous values have been garbage collected.</p>\n<p>All the code in one place:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">totalaliens <span class=\"token operator\">=</span> <span class=\"token number\">90328443435329598</span>\ntotalhumans <span class=\"token operator\">=</span> <span class=\"token number\">7530305889</span>\ntotalpythons <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'In a universe of:'</span><span class=\"token punctuation\">,</span> totalaliens<span class=\"token punctuation\">,</span> <span class=\"token string\">'alien beings. Two new beings came from the void...'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Alien</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> type_of<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>being <span class=\"token operator\">=</span> type_of\n        <span class=\"token keyword\">global</span> totalaliens\n        totalaliens <span class=\"token operator\">=</span> totalaliens <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">(</span>Alien<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>tasks_to_accomplish <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token string\">'human'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">global</span> totalhumans\n        totalhumans <span class=\"token operator\">=</span> totalhumans <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">go_back_to_earth</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Python</span><span class=\"token punctuation\">(</span>Alien<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">global</span> totalpythons\n        totalpythons <span class=\"token operator\">=</span> totalpythons<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n\nmarcel <span class=\"token operator\">=</span> Human<span class=\"token punctuation\">(</span><span class=\"token string\">'Marcel'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> marcel<span class=\"token punctuation\">.</span>being<span class=\"token punctuation\">,</span> <span class=\"token string\">'. Your name is '</span><span class=\"token punctuation\">,</span> marcel<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'no? And you are one of'</span><span class=\"token punctuation\">,</span> totalhumans<span class=\"token punctuation\">,</span> <span class=\"token string\">'human beings.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\nguido <span class=\"token operator\">=</span> Python<span class=\"token punctuation\">(</span><span class=\"token string\">'Guido'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I am a'</span><span class=\"token punctuation\">,</span> guido<span class=\"token punctuation\">.</span>being<span class=\"token punctuation\">,</span><span class=\"token string\">'and my name is'</span><span class=\"token punctuation\">,</span> guido<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">'one of'</span><span class=\"token punctuation\">,</span> totalpythons<span class=\"token punctuation\">,</span> <span class=\"token string\">'python beings.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Right now there are:'</span><span class=\"token punctuation\">,</span> totalaliens<span class=\"token punctuation\">,</span> <span class=\"token string\">'alien beings.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Human, there are 6 tasks you must accomplish to leave this planet:'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'To leave this planet, there is a generator function that runs each instance in which you overcome a problem. This builds up fuel for your spaceship home. This is the function.\\n'</span><span class=\"token punctuation\">)</span>\n\nliftoff <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'First, I give you a list([thing_1, thing_2...]), six strings will be inside it. You must check what the first letter of each string is numerically (a is 0, b is 1, etc.), then check if this index exists in the list, and finally to add the string if it does to a new list. Return the new list.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\nstrings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'zoological'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fuggedaboutit'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'turtle'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'buttercup'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ant'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'damnation'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rabbit'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">filter_strings</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    alphabet <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'j'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'k'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'m'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'q'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'t'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'u'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">]</span>\n    selected_strs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    strs_first_letter <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> <span class=\"token builtin\">str</span> <span class=\"token keyword\">in</span> strs<span class=\"token punctuation\">:</span>\n        strs_first_letter<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> letter <span class=\"token keyword\">in</span> strs_first_letter<span class=\"token punctuation\">:</span>\n        idx <span class=\"token operator\">=</span> alphabet<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> idx <span class=\"token operator\">>=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            selected_strs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> selected_strs\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>filter_strings<span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You are at:'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>liftoff<span class=\"token punctuation\">.</span>__next__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'%. Now a different task. Another function. First argument: a single number. Second argument: a dictionary ({\"some_key\": \"some_value\", ...}) containing a key called a_list with a value that is a list full of strings (â€˜a_listâ€™: [â€¦], and a separator to separate each word (â€˜separatorâ€™: â€˜somethingâ€™. As so: {â€˜a_listâ€™: [â€¦], â€˜seperatorâ€™: â€˜somethingâ€™}. You must return only the amount of words the number specifies from the list starting at index zero and each string is separated by the separator as a single string.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">seperate_arbitrary_amount_words</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> dic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    word_sequence <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        word_sequence <span class=\"token operator\">+=</span> dic<span class=\"token punctuation\">[</span><span class=\"token string\">'a_list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>dic<span class=\"token punctuation\">[</span><span class=\"token string\">'seperator'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> word_sequence\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>seperate_arbitrary_amount_words<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'a_list'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Trump'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Genghis Khan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'That noisy person'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'monkeys'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'coconuts'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">'seperator'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">' is terrible! '</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Your now at:'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>liftoff<span class=\"token punctuation\">.</span>__next__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'%. Next, I give a more confusing challenge. For one, you donâ€™t know how many arguments are given! The first set of arguments contain either a number, the value None, or a string. The second set contains key/value pairs associated in this way: some_keyword = some_value. some_keywordwill be a string. some_valuewill be a number. I want a dictionary to be returned. The key must be only the strings I first gave you (the arguments) in reverse. The value must be a concatenated string, only using the string in the keywords from the zero index up to the number specified as the value.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">rev_args_key_concat_keywords_val</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>keywords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    rev_args_key <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    concat_keywords_val <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    args_len <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n    args <span class=\"token operator\">=</span> <span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> arg <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> arg <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n        <span class=\"token keyword\">elif</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            rev_args_key <span class=\"token operator\">+=</span> arg\n        <span class=\"token keyword\">if</span> idx <span class=\"token operator\">!=</span> args_len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            rev_args_key <span class=\"token operator\">+=</span> <span class=\"token string\">' '</span>\n    <span class=\"token keyword\">for</span> keyword <span class=\"token keyword\">in</span> keywords<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>keywords<span class=\"token punctuation\">[</span>keyword<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            concat_keywords_val <span class=\"token operator\">+=</span> keyword<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\n    dic<span class=\"token punctuation\">[</span>rev_args_key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> concat_keywords_val\n    <span class=\"token keyword\">return</span> dic\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rev_args_key_concat_keywords_val<span class=\"token punctuation\">(</span><span class=\"token string\">'animal'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'amazing'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'big'</span><span class=\"token punctuation\">,</span> element<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> phone<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> anteater<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ok, good. You are at:'</span><span class=\"token punctuation\">,</span> liftoff<span class=\"token punctuation\">.</span>__next__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'%. Now, the most interesting one. You are given a matrix. Three lists in a list, each list has four strings inside. I want you to first make a new list associating each index of each list as so: ([[[0][0], [1][0], [2][0]â€¦],[[0][1], [1][1]â€¦],...]) then I want you to flatten each list to a single string and then join that list into one single string. You can only use one return statement to do this!\\n'</span><span class=\"token punctuation\">)</span>\n\nmatrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'You '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'it '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'way. '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'magically, '</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'must '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'look '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Very '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'important '</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'make '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'this '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'extremely, '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'to do!'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">flatten_matrix</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span>\n        item <span class=\"token keyword\">for</span> sublist <span class=\"token keyword\">in</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> matrix<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> sublist\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flatten_matrix<span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ok, now you are at:'</span><span class=\"token punctuation\">,</span> liftoff<span class=\"token punctuation\">.</span>__next__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'%, only two left to go! This one I need you to create nested functions in a function. There will be five functions to implement: append, extend, insert, remove, and pop. You cannot use the higher order function equivalents and each function that you create cannot mutate the original list. You are given three or four arguments. 1. a list 2. the name of the function as string 3. the one argument the function needs, index if it needs four 4. an item for insert function. Ok, good luck!\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">implement_higher_order_funcs</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> func_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>the_list<span class=\"token punctuation\">,</span> item_to_append<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> the_list <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>item_to_append<span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>list_one<span class=\"token punctuation\">,</span> list_two<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> list_one <span class=\"token operator\">+</span> list_two\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>the_list<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> the_list<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> the_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>the_list<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> the_list <span class=\"token keyword\">if</span> x <span class=\"token operator\">!=</span> item<span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>the_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> the_list<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>the_list<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">if</span> func_name <span class=\"token operator\">==</span> <span class=\"token string\">'append'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> append<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">elif</span> func_name <span class=\"token operator\">==</span> <span class=\"token string\">'extend'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> extend<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">elif</span> func_name <span class=\"token operator\">==</span> <span class=\"token string\">'insert'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> insert<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">elif</span> func_name <span class=\"token operator\">==</span> <span class=\"token string\">'remove'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> remove<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">elif</span> func_name <span class=\"token operator\">==</span> <span class=\"token string\">'pop'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> pop<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Very well done, onto the next one. Your at:'</span><span class=\"token punctuation\">,</span> liftoff<span class=\"token punctuation\">.</span>__next__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'%, only two left to go! Next one is a bit of an oddity and it is completely connected to the one following. I am to give you a wide assortment of keywords and arguments. I will call your function multiple times with a random amount or no arguments. I need you to store all the argument values that I give you in a non-global list, and all the keyword values in a non-global dictionary. Return a dictionary as so: {\"the_list\": [...], \"the_dictionary\": {...}}. Each time the function is called the list is altered or the dictionary depending upon the input.\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dictionary_and_list</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> li<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dic<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>keywords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> arg <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">:</span>\n            li<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>keywords<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> keywd <span class=\"token keyword\">in</span> keywords<span class=\"token punctuation\">:</span>\n            dic<span class=\"token punctuation\">[</span>keywd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> keywords<span class=\"token punctuation\">[</span>keywd<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'a_list'</span><span class=\"token punctuation\">:</span> li<span class=\"token punctuation\">,</span> <span class=\"token string\">'a_dictionary'</span><span class=\"token punctuation\">:</span> dic<span class=\"token punctuation\">}</span>\n\ndictionary_and_list<span class=\"token punctuation\">(</span><span class=\"token string\">'Ok, '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'you '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'are done, '</span><span class=\"token punctuation\">)</span>\ndictionary_and_list<span class=\"token punctuation\">(</span><span class=\"token string\">'it is time '</span><span class=\"token punctuation\">,</span> heading<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> back<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\ndictionary_and_list<span class=\"token punctuation\">(</span><span class=\"token string\">'to leave this '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Python world. '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Congratulations on all your accomplishments! '</span><span class=\"token punctuation\">,</span> to<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ndictionary_and_list<span class=\"token punctuation\">(</span><span class=\"token string\">'Goodbye!'</span><span class=\"token punctuation\">,</span> earth<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">back_to_earth</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> heading<span class=\"token operator\">=</span><span class=\"token string\">'Is'</span><span class=\"token punctuation\">,</span> back<span class=\"token operator\">=</span><span class=\"token string\">'it'</span><span class=\"token punctuation\">,</span> to<span class=\"token operator\">=</span><span class=\"token string\">'yet'</span><span class=\"token punctuation\">,</span> earth<span class=\"token operator\">=</span><span class=\"token string\">'time?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  last_words <span class=\"token operator\">=</span> <span class=\"token string\">'Ok, your there: '</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>liftoff<span class=\"token punctuation\">.</span>__next__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'%! '</span>\n  <span class=\"token keyword\">for</span> arg <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">:</span>\n    last_words <span class=\"token operator\">+=</span> arg\n  last_words <span class=\"token operator\">+=</span> <span class=\"token string\">'\\nHeading\\n'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>heading<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\nback\\n'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>back<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\nto\\n'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\nearth!\\n'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>earth<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>last_words<span class=\"token punctuation\">)</span>\n\nback_to_earth<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>dictionary_and_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a_list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>dictionary_and_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a_dictionary'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>And the repl:</p>\n<p><a href=\"https://repl.it/@jerrymuzsik/pythonIntroductionArticle\">Repl</a></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*L4A683TJgtsEyCueGJLVNA.png\" alt=\"Spacy alternative planet with something like the loch ness monster out of the water\"></p>\n<div style=\"text-align: center\"><small>This is Guido, Python alien</small></div>\n<p>A few other things to be aware of:</p>\n<ol>\n<li>Filenames, variable names, and function names are named with underscores.</li>\n<li>Indentation: 4 spaces is the convention.</li>\n<li>CamelCase is not used much, only in classes.</li>\n<li>If the variable is globalthenitisalllowercase (if a variable is global then it is all lowercase).</li>\n</ol>","fields":{"slug":"/posts/space-adventure-introducing-python/","tagSlugs":["/tag/python/","/tag/backend/","/tag/not-javascript/"]},"frontmatter":{"date":"2017-12-17","description":"This article is not targeting the absolute beginner. It is specifically for JS Developers or the like looking for a fun introduction to the incredibly popular programming language Python. Many concepts explained: multiple inheritance, list comprehensions, the basics, and peculiarities of the language. All code can instantly be copied/pasted into a repl, and there is a repl near the end of the article to look directly at.","tags":["Python","Backend","Not-Javascript"],"title":"A Space Adventure Introducing Python"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/space-adventure-introducing-python/"}}}